"use strict";
/**
 * Oleg Karpach code 22/07/17.
 */
var express = require("express");
var passport = require("passport");
var authentication = require("../Authentication");
var router = express.Router();
router.post('/login', function (req, res, next) {
    passport.authenticate('local-login', function (err, user, info) {
        if (err) {
            return res.status(401).send({ message: err.message });
        }
        if (!user) {
            return res.status(401).send({ message: info.message });
        }
        req.logIn(user, function (err) {
            if (err) {
                return res.status(401).send({ message: err.message });
            }
            var milliseconds = 0;
            if (req.body.remember) {
                milliseconds = 1000 * 60 * 30; // 30 minutes
                req.session.cookie.expires = new Date(Date.now() + milliseconds);
                req.session.cookie.maxAge = milliseconds;
            }
            else {
                milliseconds = 1000 * 60 * 60 * 24; // 1 day
                req.session.cookie.expires = new Date(Date.now() + milliseconds);
                req.session.cookie.maxAge = milliseconds;
            }
            return res.status(200).json(req.user);
        });
    })(req, res, next);
});
router.post('/signup', function (req, res, next) {
    passport.authenticate('local-signup', function (err, user, info) {
        if (err) {
            return res.status(403).send({ 'message': err.message });
        }
        if (!user) {
            return res.status(403).send({ 'message': info.message });
        }
        return res.status(200).send({ 'message': 'OK' });
    })(req, res, next);
});
router.get('/profile', authentication.isLoggedIn, function (req, res) {
    res.json(req.user);
});
router.get('/logout', function (req) {
    req.session.destroy(function (err) {
        console.error(err);
    });
    req.logout();
});
module.exports = router;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJvdXRlcy9Vc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRztBQUVILGlDQUFtQztBQUNuQyxtQ0FBcUM7QUFDckMsa0RBQW9EO0FBRXBELElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUVoQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxVQUFDLEdBQVEsRUFBRSxHQUFRLEVBQUUsSUFBUztJQUNuRCxRQUFRLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxVQUFDLEdBQVEsRUFBRSxJQUFTLEVBQUUsSUFBUztRQUNuRSxJQUFJLEdBQUcsRUFBRTtZQUNSLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7U0FDdEQ7UUFDRCxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1YsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztTQUN2RDtRQUNELEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFVBQUMsR0FBUTtZQUN4QixJQUFJLEdBQUcsRUFBRTtnQkFDUixPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO2FBQ3REO1lBRUQsSUFBSSxZQUFZLEdBQUcsQ0FBQyxDQUFDO1lBQ3JCLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ3RCLFlBQVksR0FBRyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLGFBQWE7Z0JBRTVDLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsWUFBWSxDQUFDLENBQUM7Z0JBQ2pFLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxZQUFZLENBQUM7YUFDekM7aUJBQU07Z0JBQ04sWUFBWSxHQUFHLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLFFBQVE7Z0JBRTVDLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsWUFBWSxDQUFDLENBQUM7Z0JBQ2pFLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxZQUFZLENBQUM7YUFDekM7WUFDRCxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2QyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDcEIsQ0FBQyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxVQUFDLEdBQVEsRUFBRSxHQUFRLEVBQUUsSUFBUztJQUNuRCxRQUFRLENBQUMsWUFBWSxDQUFDLGNBQWMsRUFBRSxVQUFDLEdBQVEsRUFBRSxJQUFTLEVBQUUsSUFBUztRQUNwRSxJQUFJLEdBQUcsRUFBRTtZQUNSLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxTQUFTLEVBQUUsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7U0FDeEQ7UUFFRCxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1YsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztTQUN6RDtRQUVELE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNsRCxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3BCLENBQUMsQ0FDRCxDQUFDO0FBRUYsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsY0FBYyxDQUFDLFVBQVUsRUFBRSxVQUFDLEdBQVEsRUFBRSxHQUFRO0lBQ3BFLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3BCLENBQUMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsVUFBQyxHQUFRO0lBQzlCLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQUMsR0FBUTtRQUM1QixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3BCLENBQUMsQ0FBQyxDQUFDO0lBQ0gsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ2QsQ0FBQyxDQUFDLENBQUM7QUFFSCxpQkFBUyxNQUFNLENBQUMiLCJmaWxlIjoicm91dGVzL1VzZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE9sZWcgS2FycGFjaCBjb2RlIDIyLzA3LzE3LlxuICovXG5cbmltcG9ydCAqIGFzIGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgKiBhcyBwYXNzcG9ydCBmcm9tICdwYXNzcG9ydCc7XG5pbXBvcnQgKiBhcyBhdXRoZW50aWNhdGlvbiBmcm9tICcuLi9BdXRoZW50aWNhdGlvbic7XG5cbmNvbnN0IHJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG5cbnJvdXRlci5wb3N0KCcvbG9naW4nLCAocmVxOiBhbnksIHJlczogYW55LCBuZXh0OiBhbnkpID0+IHtcblx0cGFzc3BvcnQuYXV0aGVudGljYXRlKCdsb2NhbC1sb2dpbicsIChlcnI6IGFueSwgdXNlcjogYW55LCBpbmZvOiBhbnkpID0+IHtcblx0XHRpZiAoZXJyKSB7XG5cdFx0XHRyZXR1cm4gcmVzLnN0YXR1cyg0MDEpLnNlbmQoeyBtZXNzYWdlOiBlcnIubWVzc2FnZSB9KTtcblx0XHR9XG5cdFx0aWYgKCF1c2VyKSB7XG5cdFx0XHRyZXR1cm4gcmVzLnN0YXR1cyg0MDEpLnNlbmQoeyBtZXNzYWdlOiBpbmZvLm1lc3NhZ2UgfSk7XG5cdFx0fVxuXHRcdHJlcS5sb2dJbih1c2VyLCAoZXJyOiBhbnkpID0+IHtcblx0XHRcdGlmIChlcnIpIHtcblx0XHRcdFx0cmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5zZW5kKHsgbWVzc2FnZTogZXJyLm1lc3NhZ2UgfSk7XG5cdFx0XHR9XG5cblx0XHRcdGxldCBtaWxsaXNlY29uZHMgPSAwO1xuXHRcdFx0aWYgKHJlcS5ib2R5LnJlbWVtYmVyKSB7XG5cdFx0XHRcdG1pbGxpc2Vjb25kcyA9IDEwMDAgKiA2MCAqIDMwOyAvLyAzMCBtaW51dGVzXG5cblx0XHRcdFx0cmVxLnNlc3Npb24uY29va2llLmV4cGlyZXMgPSBuZXcgRGF0ZShEYXRlLm5vdygpICsgbWlsbGlzZWNvbmRzKTtcblx0XHRcdFx0cmVxLnNlc3Npb24uY29va2llLm1heEFnZSA9IG1pbGxpc2Vjb25kcztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1pbGxpc2Vjb25kcyA9IDEwMDAgKiA2MCAqIDYwICogMjQ7IC8vIDEgZGF5XG5cblx0XHRcdFx0cmVxLnNlc3Npb24uY29va2llLmV4cGlyZXMgPSBuZXcgRGF0ZShEYXRlLm5vdygpICsgbWlsbGlzZWNvbmRzKTtcblx0XHRcdFx0cmVxLnNlc3Npb24uY29va2llLm1heEFnZSA9IG1pbGxpc2Vjb25kcztcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbihyZXEudXNlcik7XG5cdFx0fSk7XG5cdH0pKHJlcSwgcmVzLCBuZXh0KTtcbn0pO1xuXG5yb3V0ZXIucG9zdCgnL3NpZ251cCcsIChyZXE6IGFueSwgcmVzOiBhbnksIG5leHQ6IGFueSkgPT4ge1xuXHRcdHBhc3Nwb3J0LmF1dGhlbnRpY2F0ZSgnbG9jYWwtc2lnbnVwJywgKGVycjogYW55LCB1c2VyOiBhbnksIGluZm86IGFueSkgPT4ge1xuXHRcdFx0aWYgKGVycikge1xuXHRcdFx0XHRyZXR1cm4gcmVzLnN0YXR1cyg0MDMpLnNlbmQoeyAnbWVzc2FnZSc6IGVyci5tZXNzYWdlIH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIXVzZXIpIHtcblx0XHRcdFx0cmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5zZW5kKHsgJ21lc3NhZ2UnOiBpbmZvLm1lc3NhZ2UgfSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByZXMuc3RhdHVzKDIwMCkuc2VuZCh7ICdtZXNzYWdlJzogJ09LJyB9KTtcblx0XHR9KShyZXEsIHJlcywgbmV4dCk7XG5cdH1cbik7XG5cbnJvdXRlci5nZXQoJy9wcm9maWxlJywgYXV0aGVudGljYXRpb24uaXNMb2dnZWRJbiwgKHJlcTogYW55LCByZXM6IGFueSkgPT4ge1xuXHRyZXMuanNvbihyZXEudXNlcik7XG59KTtcblxucm91dGVyLmdldCgnL2xvZ291dCcsIChyZXE6IGFueSkgPT4ge1xuXHRyZXEuc2Vzc2lvbi5kZXN0cm95KChlcnI6IGFueSkgPT4ge1xuXHRcdGNvbnNvbGUuZXJyb3IoZXJyKTtcblx0fSk7XG5cdHJlcS5sb2dvdXQoKTtcbn0pO1xuXG5leHBvcnQgPSByb3V0ZXI7XG4iXX0=
